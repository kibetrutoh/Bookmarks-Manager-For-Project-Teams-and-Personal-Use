// Code generated by sqlc. DO NOT EDIT.
// source: admin.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO administrator (name, password)
VALUES ($1, $2)
RETURNING id, name, email_address, password, created_at, updated_at
`

type CreateAdminParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Administrator, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Name, arg.Password)
	var i Administrator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailAddress,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAdminAccount = `-- name: DeleteAdminAccount :exec
DELETE FROM administrator
WHERE id = $1
`

func (q *Queries) DeleteAdminAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAdminAccount, id)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, name, email_address, password, created_at, updated_at FROM administrator
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, id uuid.UUID) (Administrator, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i Administrator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailAddress,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminEmail = `-- name: UpdateAdminEmail :one
UPDATE administrator
SET email_address = $2
WHERE id = $1
RETURNING id, name, email_address, password, created_at, updated_at
`

type UpdateAdminEmailParams struct {
	ID           uuid.UUID `json:"id"`
	EmailAddress string    `json:"email_address"`
}

func (q *Queries) UpdateAdminEmail(ctx context.Context, arg UpdateAdminEmailParams) (Administrator, error) {
	row := q.db.QueryRowContext(ctx, updateAdminEmail, arg.ID, arg.EmailAddress)
	var i Administrator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailAddress,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminName = `-- name: UpdateAdminName :one
UPDATE administrator
SET name = $2
WHERE id = $1
RETURNING id, name, email_address, password, created_at, updated_at
`

type UpdateAdminNameParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateAdminName(ctx context.Context, arg UpdateAdminNameParams) (Administrator, error) {
	row := q.db.QueryRowContext(ctx, updateAdminName, arg.ID, arg.Name)
	var i Administrator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailAddress,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :one
UPDATE administrator
SET password = $2
WHERE id = $1
RETURNING id, name, email_address, password, created_at, updated_at
`

type UpdateAdminPasswordParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) (Administrator, error) {
	row := q.db.QueryRowContext(ctx, updateAdminPassword, arg.ID, arg.Password)
	var i Administrator
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.EmailAddress,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
