// Code generated by sqlc. DO NOT EDIT.
// source: change_email.sql

package sqlc

import (
	"context"
	"time"
)

const createChangeEmailCode = `-- name: CreateChangeEmailCode :one
INSERT INTO change_email (user_id, code, email_address, expiry)
VALUES ($1, $2, $3, $4)
ON CONFLICT (email_address) DO UPDATE
SET user_id = EXCLUDED.user_id, code = EXCLUDED.code, expiry = EXCLUDED.expiry
RETURNING user_id, code, email_address, expiry
`

type CreateChangeEmailCodeParams struct {
	UserID       int32     `json:"user_id"`
	Code         string    `json:"code"`
	EmailAddress string    `json:"email_address"`
	Expiry       time.Time `json:"expiry"`
}

func (q *Queries) CreateChangeEmailCode(ctx context.Context, arg CreateChangeEmailCodeParams) (ChangeEmail, error) {
	row := q.db.QueryRowContext(ctx, createChangeEmailCode,
		arg.UserID,
		arg.Code,
		arg.EmailAddress,
		arg.Expiry,
	)
	var i ChangeEmail
	err := row.Scan(
		&i.UserID,
		&i.Code,
		&i.EmailAddress,
		&i.Expiry,
	)
	return i, err
}

const deleteChangeEmailCode = `-- name: DeleteChangeEmailCode :exec
DELETE FROM change_email
WHERE code = $1
`

func (q *Queries) DeleteChangeEmailCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteChangeEmailCode, code)
	return err
}

const getChangeEmailCode = `-- name: GetChangeEmailCode :one
SELECT user_id, code, email_address, expiry FROM change_email
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetChangeEmailCode(ctx context.Context, code string) (ChangeEmail, error) {
	row := q.db.QueryRowContext(ctx, getChangeEmailCode, code)
	var i ChangeEmail
	err := row.Scan(
		&i.UserID,
		&i.Code,
		&i.EmailAddress,
		&i.Expiry,
	)
	return i, err
}
