// Code generated by sqlc. DO NOT EDIT.
// source: login.sql

package sqlc

import (
	"context"
	"time"
)

const createLoginMagicCode = `-- name: CreateLoginMagicCode :one
INSERT INTO login_magic_code (user_id, email_address, code, code_expiry)
VALUES ($1, $2, $3, $4)
ON CONFLICT (code) DO UPDATE
SET email_address = EXCLUDED.email_address, code_expiry = EXCLUDED.code_expiry
RETURNING user_id, code, email_address, code_expiry
`

type CreateLoginMagicCodeParams struct {
	UserID       int32     `json:"user_id"`
	EmailAddress string    `json:"email_address"`
	Code         string    `json:"code"`
	CodeExpiry   time.Time `json:"code_expiry"`
}

func (q *Queries) CreateLoginMagicCode(ctx context.Context, arg CreateLoginMagicCodeParams) (LoginMagicCode, error) {
	row := q.db.QueryRowContext(ctx, createLoginMagicCode,
		arg.UserID,
		arg.EmailAddress,
		arg.Code,
		arg.CodeExpiry,
	)
	var i LoginMagicCode
	err := row.Scan(
		&i.UserID,
		&i.Code,
		&i.EmailAddress,
		&i.CodeExpiry,
	)
	return i, err
}

const deleteMagicCode = `-- name: DeleteMagicCode :exec
DELETE FROM login_magic_code
WHERE code = $1 AND email_address = $2
`

type DeleteMagicCodeParams struct {
	Code         string `json:"code"`
	EmailAddress string `json:"email_address"`
}

func (q *Queries) DeleteMagicCode(ctx context.Context, arg DeleteMagicCodeParams) error {
	_, err := q.db.ExecContext(ctx, deleteMagicCode, arg.Code, arg.EmailAddress)
	return err
}

const getAllUserLoginMagicCodes = `-- name: GetAllUserLoginMagicCodes :many
SELECT user_id, code, email_address, code_expiry FROM login_magic_code
WHERE email_address = $1
`

func (q *Queries) GetAllUserLoginMagicCodes(ctx context.Context, emailAddress string) ([]LoginMagicCode, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserLoginMagicCodes, emailAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LoginMagicCode
	for rows.Next() {
		var i LoginMagicCode
		if err := rows.Scan(
			&i.UserID,
			&i.Code,
			&i.EmailAddress,
			&i.CodeExpiry,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMagicCode = `-- name: GetMagicCode :one
SELECT user_id, code, email_address, code_expiry FROM login_magic_code
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetMagicCode(ctx context.Context, code string) (LoginMagicCode, error) {
	row := q.db.QueryRowContext(ctx, getMagicCode, code)
	var i LoginMagicCode
	err := row.Scan(
		&i.UserID,
		&i.Code,
		&i.EmailAddress,
		&i.CodeExpiry,
	)
	return i, err
}
