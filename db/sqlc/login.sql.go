// Code generated by sqlc. DO NOT EDIT.
// source: login.sql

package sqlc

import (
	"context"
	"time"
)

const deleteMagicCode = `-- name: DeleteMagicCode :exec
DELETE FROM login_magic_code
WHERE magic_code = $1
`

func (q *Queries) DeleteMagicCode(ctx context.Context, magicCode string) error {
	_, err := q.db.ExecContext(ctx, deleteMagicCode, magicCode)
	return err
}

const getMagicCode = `-- name: GetMagicCode :one
SELECT magic_code, email_address, magic_code_expiry FROM login_magic_code
WHERE magic_code = $1
LIMIT 1
`

func (q *Queries) GetMagicCode(ctx context.Context, magicCode string) (LoginMagicCode, error) {
	row := q.db.QueryRowContext(ctx, getMagicCode, magicCode)
	var i LoginMagicCode
	err := row.Scan(&i.MagicCode, &i.EmailAddress, &i.MagicCodeExpiry)
	return i, err
}

const loginMagicCode = `-- name: LoginMagicCode :one
INSERT INTO login_magic_code (email_address, magic_code, magic_code_expiry)
VALUES ($1, $2, $3)
ON CONFLICT (magic_code) DO UPDATE
SET email_address = EXCLUDED.email_address, magic_code_expiry = EXCLUDED.magic_code_expiry
RETURNING magic_code, email_address, magic_code_expiry
`

type LoginMagicCodeParams struct {
	EmailAddress    string    `json:"email_address"`
	MagicCode       string    `json:"magic_code"`
	MagicCodeExpiry time.Time `json:"magic_code_expiry"`
}

func (q *Queries) LoginMagicCode(ctx context.Context, arg LoginMagicCodeParams) (LoginMagicCode, error) {
	row := q.db.QueryRowContext(ctx, loginMagicCode, arg.EmailAddress, arg.MagicCode, arg.MagicCodeExpiry)
	var i LoginMagicCode
	err := row.Scan(&i.MagicCode, &i.EmailAddress, &i.MagicCodeExpiry)
	return i, err
}
