// Code generated by sqlc. DO NOT EDIT.
// source: tenant.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant (
  tenant_name, project_name, user_id
) VALUES (
  $1, $2, $3
)
RETURNING user_id, tenant_id, tenant_name, project_name, image_url, created_at, updated_at, status, tier
`

type CreateTenantParams struct {
	TenantName  string    `json:"tenant_name"`
	ProjectName string    `json:"project_name"`
	UserID      uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant, arg.TenantName, arg.ProjectName, arg.UserID)
	var i Tenant
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.TenantName,
		&i.ProjectName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Tier,
	)
	return i, err
}

const getTenant = `-- name: GetTenant :one
SELECT user_id, tenant_id, tenant_name, project_name, image_url, created_at, updated_at, status, tier FROM tenant
WHERE tenant_id = $1 LIMIT 1
`

func (q *Queries) GetTenant(ctx context.Context, tenantID uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenant, tenantID)
	var i Tenant
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.TenantName,
		&i.ProjectName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Tier,
	)
	return i, err
}

const getTenantByUsedID = `-- name: GetTenantByUsedID :one
SELECT user_id, tenant_id, tenant_name, project_name, image_url, created_at, updated_at, status, tier FROM tenant
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetTenantByUsedID(ctx context.Context, userID uuid.UUID) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByUsedID, userID)
	var i Tenant
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.TenantName,
		&i.ProjectName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Tier,
	)
	return i, err
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenant
SET tenant_name = $2, project_name = $3
WHERE tenant_id = $1
RETURNING user_id, tenant_id, tenant_name, project_name, image_url, created_at, updated_at, status, tier
`

type UpdateTenantParams struct {
	TenantID    uuid.UUID `json:"tenant_id"`
	TenantName  string    `json:"tenant_name"`
	ProjectName string    `json:"project_name"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, updateTenant, arg.TenantID, arg.TenantName, arg.ProjectName)
	var i Tenant
	err := row.Scan(
		&i.UserID,
		&i.TenantID,
		&i.TenantName,
		&i.ProjectName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Tier,
	)
	return i, err
}
