// Code generated by sqlc. DO NOT EDIT.
// source: sessions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (id, user_id, refresh_token, client_agent, client_ip, client_os, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, refresh_token, client_agent, client_ip, client_os, active, issued_at, expires_at
`

type CreateUserSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       int32     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ClientAgent  string    `json:"client_agent"`
	ClientIp     string    `json:"client_ip"`
	ClientOs     string    `json:"client_os"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createUserSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.ClientAgent,
		arg.ClientIp,
		arg.ClientOs,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ClientAgent,
		&i.ClientIp,
		&i.ClientOs,
		&i.Active,
		&i.IssuedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteAllActiveSessionsForUser = `-- name: DeleteAllActiveSessionsForUser :exec
DELETE FROM user_sessions
WHERE active = 'true' AND user_id = $1
`

func (q *Queries) DeleteAllActiveSessionsForUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllActiveSessionsForUser, userID)
	return err
}

const deleteAllSessionsForaUser = `-- name: DeleteAllSessionsForaUser :exec
DELETE FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) DeleteAllSessionsForaUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllSessionsForaUser, userID)
	return err
}

const deleteUserSessionByID = `-- name: DeleteUserSessionByID :exec
DELETE FROM user_sessions
WHERE id = $1
`

func (q *Queries) DeleteUserSessionByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserSessionByID, id)
	return err
}

const getAllActiveSessionsForUser = `-- name: GetAllActiveSessionsForUser :many
SELECT id, user_id, refresh_token, client_agent, client_ip, client_os, active, issued_at, expires_at FROM user_sessions
WHERE active = 'true' AND user_id = $1
`

func (q *Queries) GetAllActiveSessionsForUser(ctx context.Context, userID int32) ([]UserSession, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveSessionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSession
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.ClientAgent,
			&i.ClientIp,
			&i.ClientOs,
			&i.Active,
			&i.IssuedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllInactiveSessionsForUser = `-- name: GetAllInactiveSessionsForUser :many
SELECT id, user_id, refresh_token, client_agent, client_ip, client_os, active, issued_at, expires_at FROM user_sessions
WHERE active = 'false' AND user_id = $1
`

func (q *Queries) GetAllInactiveSessionsForUser(ctx context.Context, userID int32) ([]UserSession, error) {
	rows, err := q.db.QueryContext(ctx, getAllInactiveSessionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSession
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.ClientAgent,
			&i.ClientIp,
			&i.ClientOs,
			&i.Active,
			&i.IssuedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSessionsForUser = `-- name: GetAllSessionsForUser :many
SELECT id, user_id, refresh_token, client_agent, client_ip, client_os, active, issued_at, expires_at
FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) GetAllSessionsForUser(ctx context.Context, userID int32) ([]UserSession, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSession
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.ClientAgent,
			&i.ClientIp,
			&i.ClientOs,
			&i.Active,
			&i.IssuedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSessionByID = `-- name: GetUserSessionByID :one
SELECT id, user_id, refresh_token, client_agent, client_ip, client_os, active, issued_at, expires_at FROM user_sessions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserSessionByID(ctx context.Context, id uuid.UUID) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getUserSessionByID, id)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ClientAgent,
		&i.ClientIp,
		&i.ClientOs,
		&i.Active,
		&i.IssuedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const updateActiveSessionsForUserToInactive = `-- name: UpdateActiveSessionsForUserToInactive :exec
UPDATE user_sessions
SET active = 'false'
WHERE active = 'true' AND user_id = $1
`

func (q *Queries) UpdateActiveSessionsForUserToInactive(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, updateActiveSessionsForUserToInactive, userID)
	return err
}

const updateOneActiveUserSessionToInactive = `-- name: UpdateOneActiveUserSessionToInactive :exec
UPDATE user_sessions
SET active = 'false'
WHERE id = $1
`

func (q *Queries) UpdateOneActiveUserSessionToInactive(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateOneActiveUserSessionToInactive, id)
	return err
}
